package team.kaleni.ping.tower.backend.ping_service.service;

import lombok.extern.slf4j.Slf4j;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.scheduling.annotation.Scheduled;
import org.springframework.stereotype.Service;
import team.kaleni.ping.tower.backend.ping_service.dto.PingResultDto;

import java.util.ArrayList;
import java.util.List;
import java.util.concurrent.ConcurrentLinkedQueue;
import java.util.concurrent.atomic.AtomicLong;

@Service
@Slf4j
public class PingHistoryService {

    @Value("${ping.clickhouse.batch.size:1000}")
    private int batchSize;

    @Value("${ping.clickhouse.batch.timeout:60000}")
    private long batchTimeoutMs;

    private final ConcurrentLinkedQueue<PingResultDto> pendingResults = new ConcurrentLinkedQueue<>();
    private final AtomicLong totalBatched = new AtomicLong(0);
    private volatile long lastBatchTime = System.currentTimeMillis();

    /**
     * üî• –î–æ–±–∞–≤–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø–∏–Ω–≥–∞ –≤ –±–∞—Ç—á
     */
    public void addToBatch(PingResultDto pingResult) {
        pendingResults.offer(pingResult);

        // –ï—Å–ª–∏ –¥–æ—Å—Ç–∏–≥–ª–∏ —Ä–∞–∑–º–µ—Ä–∞ –±–∞—Ç—á–∞, –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ
        if (pendingResults.size() >= batchSize) {
            processBatch();
        }
    }

    /**
     * ‚è∞ –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –±–∞—Ç—á–µ–π (–∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥)
     */
    @Scheduled(fixedRate = 30000)
    public void processScheduledBatch() {
        long currentTime = System.currentTimeMillis();

        // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –µ—Å–ª–∏ –µ—Å—Ç—å –¥–∞–Ω–Ω—ã–µ –∏ –ø—Ä–æ—à–µ–ª timeout
        if (!pendingResults.isEmpty() && (currentTime - lastBatchTime) > batchTimeoutMs) {
            processBatch();
        }
    }

    /**
     * üìä –û–±—Ä–∞–±–æ—Ç–∞—Ç—å –Ω–∞–∫–æ–ø–ª–µ–Ω–Ω—ã–π –±–∞—Ç—á
     */
    private synchronized void processBatch() {
        if (pendingResults.isEmpty()) {
            return;
        }

        List<PingResultDto> batch = new ArrayList<>();
        PingResultDto result;

        // –ò–∑–≤–ª–µ–∫–∞–µ–º –≤—Å–µ –Ω–∞–∫–æ–ø–ª–µ–Ω–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        while ((result = pendingResults.poll()) != null) {
            batch.add(result);
        }

        if (batch.isEmpty()) {
            return;
        }

        try {
            // TODO: –ó–¥–µ—Å—å –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–∫–∞ –≤ ClickHouse
            // clickHouseService.saveBatch(batch);

            // –ü–æ–∫–∞ –ø—Ä–æ—Å—Ç–æ –ª–æ–≥–∏—Ä—É–µ–º
            log.info("Processed batch of {} ping results (total batched: {})",
                    batch.size(), totalBatched.addAndGet(batch.size()));

            // –õ–æ–≥–∏—Ä—É–µ–º sample —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
            if (log.isDebugEnabled() && !batch.isEmpty()) {
                PingResultDto sample = batch.get(0);
                log.debug("Sample ping result: monitor={}, status={}, responseTime={}ms, url={}",
                        sample.getMonitorId(), sample.getStatus(),
                        sample.getResponseTimeMs(), sample.getUrl());
            }

        } catch (Exception e) {
            log.error("Error processing ping results batch: {}", e.getMessage());

            // –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –æ–±—Ä–∞—Ç–Ω–æ –≤ –æ—á–µ—Ä–µ–¥—å
            pendingResults.addAll(batch);
        }

        lastBatchTime = System.currentTimeMillis();
    }

    /**
     * üìà –ü–æ–ª—É—á–∏—Ç—å —Ä–∞–∑–º–µ—Ä —Ç–µ–∫—É—â–µ–≥–æ –±–∞—Ç—á–∞
     */
    public int getBatchSize() {
        return pendingResults.size();
    }

    /**
     * üìä –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
     */
    public long getTotalBatched() {
        return totalBatched.get();
    }
}

