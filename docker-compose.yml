services:
  # PostgreSQL база для URL Service
  url_service_db:
    image: postgres:15-alpine
    container_name: url_service_db
    environment:
      POSTGRES_DB: ${URL_SERVICE_DB_NAME}
      POSTGRES_USER: ${URL_SERVICE_DB_USER}
      POSTGRES_PASSWORD: ${URL_SERVICE_DB_PASSWORD}
    volumes:
      - url_postgres_data:/var/lib/postgresql/data
    networks:
      - ping_app_network
    restart: unless-stopped

  # PostgreSQL база для User Service
  user_service_db:
    image: postgres:15-alpine
    container_name: user_service_db
    environment:
      POSTGRES_DB: ${USER_SERVICE_DB_NAME}
      POSTGRES_USER: ${USER_SERVICE_DB_USER}
      POSTGRES_PASSWORD: ${USER_SERVICE_DB_PASSWORD}
    volumes:
      - user_postgres_data:/var/lib/postgresql/data
    networks:
      - ping_app_network
    restart: unless-stopped

  # Redis для кэширования и очередей
  redis:
    image: redis:7-alpine
    container_name: redis
    command: redis-server --appendonly yes --replica-read-only no
    volumes:
      - redis_data:/data
    networks:
      - ping_app_network
    ports:
      - "6379:6379"
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 3s
      retries: 5

  # URL Service приложение
  url_service:
    build:
      context: ./backend/url-service
      dockerfile: Dockerfile
    container_name: url-service
    environment:
      SPRING_DATASOURCE_URL: jdbc:postgresql://url_service_db:5432/${URL_SERVICE_DB_NAME}
      SPRING_DATASOURCE_USERNAME: ${URL_SERVICE_DB_USER}
      SPRING_DATASOURCE_PASSWORD: ${URL_SERVICE_DB_PASSWORD}
      SPRING_PROFILES_ACTIVE: ${SPRING_PROFILES_ACTIVE:-docker}
      # Redis configuration
      REDIS_HOST: redis
      REDIS_PORT: ${REDIS_PORT}
      REDIS_PASSWORD: ${REDIS_PASSWORD}
      REDIS_DATABASE: ${REDIS_DATABASE}
    ports:
      - "${URL_SERVICE_PORT}:8080"
    depends_on:
      - url_service_db
      - redis
    networks:
      - ping_app_network
    restart: unless-stopped

  # User Service приложение
  user_service:
    build:
      context: ./backend/user-service
      dockerfile: Dockerfile
    container_name: user-service
    environment:
      USER_SERVICE_PORT: ${USER_SERVICE_DOCKER_PORT}
      SPRING_DATASOURCE_URL: jdbc:postgresql://user_service_db:5432/${USER_SERVICE_DB_NAME}
      SPRING_DATASOURCE_USERNAME: ${USER_SERVICE_DB_USER}
      SPRING_DATASOURCE_PASSWORD: ${USER_SERVICE_DB_PASSWORD}
      SPRING_PROFILES_ACTIVE: ${SPRING_PROFILES_ACTIVE:-docker}
    ports:
      - "${USER_SERVICE_PORT}:${USER_SERVICE_DOCKER_PORT}"
    depends_on:
      - user_service_db
    networks:
      - ping_app_network
    restart: unless-stopped

  # Frontend приложение
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: frontend
    ports:
      - "${FRONTEND_PORT}:5173"
    networks:
      - ping_app_network
    restart: unless-stopped

volumes:
  url_postgres_data:
    name: url_postgres_data
  user_postgres_data:
    name: user_postgres_data
  redis_data:
    name: redis_data

networks:
  ping_app_network:
    driver: bridge
    name: ping_app_network
