services:
  # PostgreSQL –±–∞–∑–∞ –¥–ª—è URL Service
  url_service_db:
    image: postgres:15-alpine
    container_name: url_service_db
    environment:
      POSTGRES_DB: ${URL_SERVICE_DB_NAME}
      POSTGRES_USER: ${URL_SERVICE_DB_USER}
      POSTGRES_PASSWORD: ${URL_SERVICE_DB_PASSWORD}
    volumes:
      - url_postgres_data:/var/lib/postgresql/data
    networks:
      - ping_app_network
    restart: unless-stopped

  # PostgreSQL –±–∞–∑–∞ –¥–ª—è User Service
  user_service_db:
    image: postgres:15-alpine
    container_name: user_service_db
    environment:
      POSTGRES_DB: ${USER_SERVICE_DB_NAME}
      POSTGRES_USER: ${USER_SERVICE_DB_USER}
      POSTGRES_PASSWORD: ${USER_SERVICE_DB_PASSWORD}
    volumes:
      - user_postgres_data:/var/lib/postgresql/data
    networks:
      - ping_app_network
    restart: unless-stopped
  
  # Kafka –¥–ª—è Notification Service –∏ Ping Service
  kafka:
    image: bitnami/kafka:latest
    container_name: kafka
    ports:
      - "${KAFKA_INTERNAL_PORT}:${KAFKA_INTERNAL_PORT}"
      - "${KAFKA_EXTERNAL_PORT}:${KAFKA_EXTERNAL_PORT}"
    environment:
      KAFKA_CFG_PROCESS_ROLES: broker,controller
      KAFKA_CFG_CONTROLLER_LISTENER_NAMES: CONTROLLER
      KAFKA_CFG_LISTENERS: INTERNAL://:${KAFKA_INTERNAL_PORT},EXTERNAL://:${KAFKA_EXTERNAL_PORT},CONTROLLER://:${KAFKA_CONTROLLER_PORT}
      KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP: INTERNAL:PLAINTEXT,EXTERNAL:PLAINTEXT,CONTROLLER:PLAINTEXT
      KAFKA_CFG_ADVERTISED_LISTENERS: INTERNAL://kafka:${KAFKA_INTERNAL_PORT},EXTERNAL://${KAFKA_BOOTSTRAP_SERVERS}
      KAFKA_CFG_INTER_BROKER_LISTENER_NAME: INTERNAL
      KAFKA_CFG_CONTROLLER_QUORUM_VOTERS: 1@kafka:${KAFKA_CONTROLLER_PORT}
      KAFKA_CFG_NODE_ID: 1
      KAFKA_CFG_AUTO_CREATE_TOPICS_ENABLE: false
      KAFKA_HEAP_OPTS: -Xmx512m -Xms512m
    volumes:
      - kafka_data:/bitnami/kafka
    networks:
      - kafka-network

  # Kafka UI –¥–ª—è —á–µ–ª–æ–≤–µ–∫–æ–≤
  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    container_name: kafka-ui
    ports:
      - "${KAFKA_UI_EXTERNAL_PORT}:${KAFKA_UI_INTERNAL_PORT}"
    environment:
      - KAFKA_CLUSTERS_0_NAME=local-kafka
      - KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS=${KAFKA_UI_CONNECT_TO_KAFKA_PORT}
    depends_on:
      - kafka
    networks:
      - kafka-network
  
  # Redis –¥–ª—è –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è –∏ –æ—á–µ—Ä–µ–¥–µ–π
  redis:
    image: redis:7-alpine
    container_name: redis
    command: redis-server --appendonly yes --replica-read-only no
    volumes:
      - redis_data:/data
    networks:
      - ping_app_network
    ports:
      - "6379:6379"
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 3s
      retries: 5
  
  # üî• ClickHouse –¥–ª—è ping –∏—Å—Ç–æ—Ä–∏–∏
  clickhouse:
    image: clickhouse/clickhouse-server:24.1
    container_name: clickhouse
    environment:
      CLICKHOUSE_DB: ${CLICKHOUSE_DB_NAME:-ping_history}
      CLICKHOUSE_USER: ${CLICKHOUSE_USER:-default}
      CLICKHOUSE_PASSWORD: ${CLICKHOUSE_PASSWORD:-}
      CLICKHOUSE_DEFAULT_ACCESS_MANAGEMENT: 1
    ports:
      - "${CLICKHOUSE_PORT:-8123}:8123"
      - "${CLICKHOUSE_TCP_PORT:-9000}:9000"
    volumes:
      - clickhouse_data:/var/lib/clickhouse
      - ./clickhouse/init:/docker-entrypoint-initdb.d
    networks:
      - ping_app_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--spider", "-q", "localhost:8123/ping"]
      interval: 30s
      timeout: 5s
      retries: 3

  # URL Service –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
  url_service:
    build:
      context: ./backend/url-service
      dockerfile: Dockerfile
    container_name: url-service
    environment:
      SPRING_DATASOURCE_URL: jdbc:postgresql://url_service_db:5432/${URL_SERVICE_DB_NAME}
      SPRING_DATASOURCE_USERNAME: ${URL_SERVICE_DB_USER}
      SPRING_DATASOURCE_PASSWORD: ${URL_SERVICE_DB_PASSWORD}
      SPRING_PROFILES_ACTIVE: ${SPRING_PROFILES_ACTIVE:-docker}
      # Redis configuration
      REDIS_HOST: redis
      REDIS_PORT: ${REDIS_PORT}
      REDIS_PASSWORD: ${REDIS_PASSWORD}
      REDIS_DATABASE: ${REDIS_DATABASE}
    ports:
      - "${URL_SERVICE_PORT}:8080"
    depends_on:
      - url_service_db
      - redis
    networks:
      - ping_app_network
    restart: unless-stopped
  
  # –ù–û–í–´–ô Ping Service
  ping_service:
    build:
      context: ./backend/ping-service
      dockerfile: Dockerfile
    container_name: ping-service
    environment:
      SPRING_PROFILES_ACTIVE: ${SPRING_PROFILES_ACTIVE:-docker}
      # Redis configuration
      REDIS_HOST: redis
      REDIS_PORT: ${REDIS_PORT}
      REDIS_PASSWORD: ${REDIS_PASSWORD}
      REDIS_DATABASE: ${REDIS_DATABASE}
      # ClickHouse configuration
      CLICKHOUSE_URL: http://clickhouse:8123
      CLICKHOUSE_DATABASE: ${CLICKHOUSE_DB_NAME:-ping_history}
      CLICKHOUSE_USER: ${CLICKHOUSE_USER:-default}
      CLICKHOUSE_PASSWORD: ${CLICKHOUSE_PASSWORD:-}
      # Ping service configuration
      PING_SCHEDULER_INTERVAL: ${PING_SCHEDULER_INTERVAL:-5000}
      PING_THREAD_POOL_SIZE: ${PING_THREAD_POOL_SIZE:-10}
      PING_BATCH_SIZE: ${PING_BATCH_SIZE:-50}
    depends_on:
      - redis
    networks:
      - ping_app_network
      - kafka-network
    restart: unless-stopped

  # Statistics Service
  statistics_service:
    build:
      context: ./backend/statistics-service
      dockerfile: Dockerfile
    container_name: statistics-service
    environment:
      SPRING_PROFILES_ACTIVE: ${SPRING_PROFILES_ACTIVE:-docker}
      CLICKHOUSE_URL: http://clickhouse:8123
      CLICKHOUSE_DATABASE: ${CLICKHOUSE_DB_NAME:-ping_history}
      CLICKHOUSE_USER: ${CLICKHOUSE_USER:-default}
      CLICKHOUSE_PASSWORD: ${CLICKHOUSE_PASSWORD:-}
      SERVER_PORT: ${STATISTICS_SERVICE_DOCKER_PORT}
    ports:
      - "${STATISTICS_SERVICE_PORT}:${STATISTICS_SERVICE_DOCKER_PORT}"
    depends_on:
      - clickhouse
    networks:
      - ping_app_network
    restart: unless-stopped

  # User Service –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
  user_service:
    build:
      context: ./backend/user-service
      dockerfile: Dockerfile
    container_name: user-service
    environment:
      USER_SERVICE_PORT: ${USER_SERVICE_DOCKER_PORT}
      SPRING_DATASOURCE_URL: jdbc:postgresql://user_service_db:5432/${USER_SERVICE_DB_NAME}
      SPRING_DATASOURCE_USERNAME: ${USER_SERVICE_DB_USER}
      SPRING_DATASOURCE_PASSWORD: ${USER_SERVICE_DB_PASSWORD}
      SPRING_PROFILES_ACTIVE: ${SPRING_PROFILES_ACTIVE:-docker}
    ports:
      - "${USER_SERVICE_PORT}:${USER_SERVICE_DOCKER_PORT}"
    depends_on:
      - user_service_db
    networks:
      - ping_app_network
    restart: unless-stopped

  # Notification Service –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
  notification_service:
    build:
      context: ./backend/notification-service
      dockerfile: Dockerfile
    container_name: notification-service
    ports:
      - "${NOTIFICATION_SERVICE_PORT}:${NOTIFICATION_SERVICE_DOCKER_PORT}"
    environment:
      NOTIFICATION_SERVICE_PORT: ${NOTIFICATION_SERVICE_PORT}
      KAFKA_BOOTSTRAP_SERVERS: ${KAFKA_BOOTSTRAP_DOCKER_SERVERS}
      NOTIFICATION_SERVICE_GMAIL: ${NOTIFICATION_SERVICE_GMAIL}
      NOTIFICATION_SERVICE_APP_PASSWORD: ${NOTIFICATION_SERVICE_APP_PASSWORD}
      NOTIFICATION_SERVICE_TELEGRAM_BOT_TOKEN: ${NOTIFICATION_SERVICE_TELEGRAM_BOT_TOKEN}
      NOTIFICATION_SERVICE_TELEGRAM_SUBSCRIBE_PATH: ${NOTIFICATION_SERVICE_TELEGRAM_SUBSCRIBE_PATH}
      NOTIFICATION_SERVICE_TELEGRAM_UNSUBSCRIBE_PATH: ${NOTIFICATION_SERVICE_TELEGRAM_UNSUBSCRIBE_PATH}
    networks:
      - kafka-network
      - ping_app_network
    restart: unless-stopped

  # Frontend –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: frontend
    ports:
      - "${FRONTEND_PORT}:5173"
    networks:
      - ping_app_network
    restart: unless-stopped

volumes:
  url_postgres_data:
    name: url_postgres_data
  user_postgres_data:
    name: user_postgres_data
  kafka_data:
    name: kafka_data
  redis_data:
    name: redis_data
  clickhouse_data:  # üî• –ù–û–í–´–ô volume –¥–ª—è ClickHouse
    name: clickhouse_data

networks:
  ping_app_network:
    driver: bridge
    name: ping_app_network
  kafka-network:
    driver: bridge
    name: kafka-network