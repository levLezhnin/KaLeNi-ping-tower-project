services:
  # PostgreSQL база для URL Service
  url_service_db:
    image: postgres:15-alpine
    container_name: url_service_db
    environment:
      POSTGRES_DB: ${URL_SERVICE_DB_NAME}
      POSTGRES_USER: ${URL_SERVICE_DB_USER}
      POSTGRES_PASSWORD: ${URL_SERVICE_DB_PASSWORD}
    volumes:
      - url_postgres_data:/var/lib/postgresql/data
    networks:
      - ping_app_network
    restart: unless-stopped

  # PostgreSQL база для User Service
  user_service_db:
    image: postgres:15-alpine
    container_name: user_service_db
    environment:
      POSTGRES_DB: ${USER_SERVICE_DB_NAME}
      POSTGRES_USER: ${USER_SERVICE_DB_USER}
      POSTGRES_PASSWORD: ${USER_SERVICE_DB_PASSWORD}
    volumes:
      - user_postgres_data:/var/lib/postgresql/data
    networks:
      - ping_app_network
    restart: unless-stopped

  # Kafka для Notification Service и Ping Service
  kafka:
    image: bitnami/kafka:latest
    container_name: kafka
    ports:
      - "${KAFKA_INTERNAL_PORT}:${KAFKA_INTERNAL_PORT}"
      - "${KAFKA_EXTERNAL_PORT}:${KAFKA_EXTERNAL_PORT}"
    environment:
      KAFKA_CFG_PROCESS_ROLES: broker,controller
      KAFKA_CFG_CONTROLLER_LISTENER_NAMES: CONTROLLER
      KAFKA_CFG_LISTENERS: INTERNAL://:${KAFKA_INTERNAL_PORT},EXTERNAL://:${KAFKA_EXTERNAL_PORT},CONTROLLER://:${KAFKA_CONTROLLER_PORT}
      KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP: INTERNAL:PLAINTEXT,EXTERNAL:PLAINTEXT,CONTROLLER:PLAINTEXT
      KAFKA_CFG_ADVERTISED_LISTENERS: INTERNAL://kafka:${KAFKA_INTERNAL_PORT},EXTERNAL://${KAFKA_BOOTSTRAP_SERVERS}
      KAFKA_CFG_INTER_BROKER_LISTENER_NAME: INTERNAL
      KAFKA_CFG_CONTROLLER_QUORUM_VOTERS: 1@kafka:${KAFKA_CONTROLLER_PORT}
      KAFKA_CFG_NODE_ID: 1
      KAFKA_CFG_AUTO_CREATE_TOPICS_ENABLE: false
      KAFKA_HEAP_OPTS: -Xmx512m -Xms512m
    volumes:
      - kafka_data:/bitnami/kafka
    networks:
      - kafka-network

  # Kafka UI для человеков
  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    container_name: kafka-ui
    ports:
      - "${KAFKA_UI_EXTERNAL_PORT}:${KAFKA_UI_INTERNAL_PORT}"
    environment:
      - KAFKA_CLUSTERS_0_NAME=local-kafka
      - KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS=${KAFKA_UI_CONNECT_TO_KAFKA_PORT}
    depends_on:
      - kafka
    networks:
      - kafka-network

  # URL Service приложение
  url_service:
    build:
      context: ./backend/url-service
      dockerfile: Dockerfile
    container_name: url-service
    environment:
      SPRING_DATASOURCE_URL: jdbc:postgresql://url_service_db:5432/${URL_SERVICE_DB_NAME}
      SPRING_DATASOURCE_USERNAME: ${URL_SERVICE_DB_USER}
      SPRING_DATASOURCE_PASSWORD: ${URL_SERVICE_DB_PASSWORD}
      SPRING_PROFILES_ACTIVE: ${SPRING_PROFILES_ACTIVE:-docker}
    ports:
      - "${URL_SERVICE_PORT}:8080"
    depends_on:
      - url_service_db
    networks:
      - ping_app_network
    restart: unless-stopped

  # User Service приложение
  user_service:
    build:
      context: ./backend/user-service
      dockerfile: Dockerfile
    container_name: user-service
    environment:
      USER_SERVICE_PORT: ${USER_SERVICE_DOCKER_PORT}
      SPRING_DATASOURCE_URL: jdbc:postgresql://user_service_db:5432/${USER_SERVICE_DB_NAME}
      SPRING_DATASOURCE_USERNAME: ${USER_SERVICE_DB_USER}
      SPRING_DATASOURCE_PASSWORD: ${USER_SERVICE_DB_PASSWORD}
      SPRING_PROFILES_ACTIVE: ${SPRING_PROFILES_ACTIVE:-docker}
    ports:
      - "${USER_SERVICE_PORT}:${USER_SERVICE_DOCKER_PORT}"
    depends_on:
      - user_service_db
    networks:
      - ping_app_network
    restart: unless-stopped

  # Notification Service приложение
  notification_service:
    build:
      context: ./backend/notification-service
      dockerfile: Dockerfile
    container_name: notification-service
    ports:
      - "${NOTIFICATION_SERVICE_PORT}:${NOTIFICATION_SERVICE_DOCKER_PORT}"
    environment:
      NOTIFICATION_SERVICE_PORT: ${NOTIFICATION_SERVICE_PORT}
      KAFKA_BOOTSTRAP_SERVERS: ${KAFKA_BOOTSTRAP_DOCKER_SERVERS}
      NOTIFICATION_SERVICE_GMAIL: ${NOTIFICATION_SERVICE_GMAIL}
      NOTIFICATION_SERVICE_APP_PASSWORD: ${NOTIFICATION_SERVICE_APP_PASSWORD}
      NOTIFICATION_SERVICE_TELEGRAM_BOT_TOKEN: ${NOTIFICATION_SERVICE_TELEGRAM_BOT_TOKEN}
      NOTIFICATION_SERVICE_TELEGRAM_SUBSCRIBE_PATH: ${NOTIFICATION_SERVICE_TELEGRAM_SUBSCRIBE_PATH}
      NOTIFICATION_SERVICE_TELEGRAM_UNSUBSCRIBE_PATH: ${NOTIFICATION_SERVICE_TELEGRAM_UNSUBSCRIBE_PATH}
    networks:
      - kafka-network
    restart: unless-stopped

  # Frontend приложение
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: frontend
    ports:
      - "${FRONTEND_PORT}:5173"
    networks:
      - ping_app_network
    restart: unless-stopped

volumes:
  url_postgres_data:
    name: url_postgres_data
  user_postgres_data:
    name: user_postgres_data
  kafka_data:
    name: kafka_data

networks:
  ping_app_network:
    driver: bridge
    name: ping_app_network
  kafka-network:
    driver: bridge
    name: kafka-network